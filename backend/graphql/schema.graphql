"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    ticket(
        id: ID @eq @rules(apply: ["prohibits:user", "required_without:user"])
        user: String @eq @rules(apply: ["prohibits:id", "required_without:id", "user"])
    ): Ticket @find

    tickets(
        user: String @where(operator: "like")
    ): [Ticket!]! @paginate(defaultCount: 10)
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

type Mutation {
    createUser(input: CreateUserInput! @spread): User @create
    createTicket(user: String!, status: TicketStatus): Ticket @create
    updateTicket(id: ID!, user: String!, status: TicketStatus!): Ticket @update
    deleteTicket(id: ID! @whereKey): Ticket @delete
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Ticket {
    id: ID!
    user: String!
    status: TicketStatus!
    created_at: DateTime!
    updated_at: DateTime!
}

enum TicketStatus {
    Abierto
    Cerrado
}
